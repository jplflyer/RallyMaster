openapi: 3.0.3
info:
  title: Rally Master API
  description: REST API for motorcycle rally management system
  version: 1.0.0
  contact:
    name: Rally Master Development Team

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required: [id, username, email, firstName, lastName, roles, isActive]
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [RALLY_MASTER, RIDER, SCORER]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Rally:
      type: object
      required: [id, name, description, startDate, endDate, location, storageMode, status]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          type: string
        storageMode:
          type: string
          enum: [LOCAL, SERVER]
        status:
          type: string
          enum: [DRAFT, PUBLISHED, ACTIVE, COMPLETED, CANCELLED]
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BonusPoint:
      type: object
      required: [id, rallyId, name, abbreviation, latitude, longitude, points]
      properties:
        id:
          type: string
          format: uuid
        rallyId:
          type: string
          format: uuid
        name:
          type: string
        abbreviation:
          type: string
          maxLength: 6
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        points:
          type: integer
          minimum: 1
        description:
          type: string
        address:
          type: string
          nullable: true

    Combination:
      type: object
      required: [id, rallyId, name, points, isRequired]
      properties:
        id:
          type: string
          format: uuid
        rallyId:
          type: string
          format: uuid
        name:
          type: string
        points:
          type: integer
          minimum: 1
        description:
          type: string
          nullable: true
        isRequired:
          type: boolean
        minimumCount:
          type: integer
          minimum: 2
          nullable: true
        bonusPoints:
          type: array
          items:
            $ref: '#/components/schemas/BonusPoint'

    RallyRegistration:
      type: object
      required: [id, rallyId, riderId, riderNumber, status]
      properties:
        id:
          type: string
          format: uuid
        rallyId:
          type: string
          format: uuid
        riderId:
          type: string
          format: uuid
        riderNumber:
          type: integer
        registrationDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [REGISTERED, CANCELLED, DNF, FINISHED]

    Route:
      type: object
      required: [id, rallyRegistrationId, name, plannedBonusPoints]
      properties:
        id:
          type: string
          format: uuid
        rallyRegistrationId:
          type: string
          format: uuid
        name:
          type: string
        plannedBonusPoints:
          type: array
          items:
            type: string
            format: uuid
        estimatedDuration:
          type: string
          format: duration
        estimatedDistance:
          type: number
          format: double
        alternativeRoutes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              format: uuid
        isActive:
          type: boolean

    RiderScore:
      type: object
      required: [id, rallyRegistrationId, bonusPointId, claimedAt, isApproved]
      properties:
        id:
          type: string
          format: uuid
        rallyRegistrationId:
          type: string
          format: uuid
        bonusPointId:
          type: string
          format: uuid
        claimedAt:
          type: string
          format: date-time
        isApproved:
          type: boolean
        scorerNotes:
          type: string
          nullable: true
        scoredBy:
          type: string
          format: uuid
          nullable: true
        scoredAt:
          type: string
          format: date-time
          nullable: true
        photoUrl:
          type: string
          nullable: true

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      required: [token, user]
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags: [Authentication]
      summary: User registration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, firstName, lastName, roles]
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
                    enum: [RALLY_MASTER, RIDER, SCORER]
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rallies:
    get:
      tags: [Rally Management]
      summary: List available rallies
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PUBLISHED, ACTIVE]
        - name: location
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of rallies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rally'

    post:
      tags: [Rally Management]
      summary: Create new rally
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, description, startDate, endDate, location, storageMode]
              properties:
                name:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                location:
                  type: string
                storageMode:
                  type: string
                  enum: [LOCAL, SERVER]
      responses:
        201:
          description: Rally created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rally'
        400:
          description: Invalid rally data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rallies/{rallyId}:
    get:
      tags: [Rally Management]
      summary: Get rally details
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Rally details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rally'
        404:
          description: Rally not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Rally Management]
      summary: Update rally
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rally'
      responses:
        200:
          description: Rally updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rally'
        400:
          description: Invalid rally data
        404:
          description: Rally not found

  /rallies/{rallyId}/bonus-points:
    get:
      tags: [Bonus Points]
      summary: Get bonus points for rally
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of bonus points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BonusPoint'

    post:
      tags: [Bonus Points]
      summary: Create bonus point
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, abbreviation, latitude, longitude, points]
              properties:
                name:
                  type: string
                abbreviation:
                  type: string
                latitude:
                  type: number
                longitude:
                  type: number
                points:
                  type: integer
                description:
                  type: string
                address:
                  type: string
      responses:
        201:
          description: Bonus point created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusPoint'

  /rallies/{rallyId}/combinations:
    get:
      tags: [Combinations]
      summary: Get combinations for rally
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of combinations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Combination'

    post:
      tags: [Combinations]
      summary: Create combination
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, points, isRequired, bonusPointIds]
              properties:
                name:
                  type: string
                points:
                  type: integer
                description:
                  type: string
                isRequired:
                  type: boolean
                minimumCount:
                  type: integer
                bonusPointIds:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        201:
          description: Combination created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combination'

  /rallies/{rallyId}/register:
    post:
      tags: [Registration]
      summary: Register for rally
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RallyRegistration'
        400:
          description: Registration not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /registrations/{registrationId}/routes:
    get:
      tags: [Route Planning]
      summary: Get routes for registration
      parameters:
        - name: registrationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'

    post:
      tags: [Route Planning]
      summary: Create route
      parameters:
        - name: registrationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, plannedBonusPoints]
              properties:
                name:
                  type: string
                plannedBonusPoints:
                  type: array
                  items:
                    type: string
                    format: uuid
                estimatedDuration:
                  type: string
                estimatedDistance:
                  type: number
                alternativeRoutes:
                  type: object
      responses:
        201:
          description: Route created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'

  /routes/{routeId}/export:
    get:
      tags: [Route Planning]
      summary: Export route in specified format
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum: [GPX, KML, KMZ, CSV, JSON]
      responses:
        200:
          description: Route export file
          content:
            application/gpx+xml: {}
            application/vnd.google-earth.kml+xml: {}
            application/vnd.google-earth.kmz: {}
            text/csv: {}
            application/json: {}

  /rallies/{rallyId}/scoring:
    get:
      tags: [Scoring]
      summary: Get scoring data for rally
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Scoring data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiderScore'

  /registrations/{registrationId}/scores:
    post:
      tags: [Scoring]
      summary: Submit rider score
      parameters:
        - name: registrationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [bonusPointId, claimedAt]
              properties:
                bonusPointId:
                  type: string
                  format: uuid
                claimedAt:
                  type: string
                  format: date-time
                isApproved:
                  type: boolean
                  default: true
                scorerNotes:
                  type: string
                photoUrl:
                  type: string
      responses:
        201:
          description: Score submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderScore'

  /scores/{scoreId}:
    put:
      tags: [Scoring]
      summary: Update score approval
      parameters:
        - name: scoreId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [isApproved]
              properties:
                isApproved:
                  type: boolean
                scorerNotes:
                  type: string
      responses:
        200:
          description: Score updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiderScore'

  /rallies/{rallyId}/results:
    get:
      tags: [Results]
      summary: Get rally results/leaderboard
      parameters:
        - name: rallyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Rally results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rider:
                      $ref: '#/components/schemas/User'
                    totalPoints:
                      type: integer
                    bonusPointsEarned:
                      type: integer
                    combinationsCompleted:
                      type: integer
                    finalPosition:
                      type: integer

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Rally Management
    description: Rally creation and management
  - name: Bonus Points
    description: Bonus point management
  - name: Combinations
    description: Combination management
  - name: Registration
    description: Rally registration
  - name: Route Planning
    description: Route planning and export
  - name: Scoring
    description: Rally scoring
  - name: Results
    description: Rally results and leaderboard